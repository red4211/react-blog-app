{"version":3,"sources":["actions.js","FullPost.js","CreateNewPost.js","App.js","serviceWorker.js","index.js"],"names":["setPostVisibility","bool","type","showFullPost","setEditTitle","handleChange","name","text","TOGGLEFORM","FullPost","e","target","inpVal","value","props","dispatch","saveChanges","getState","fetch","fullPost","id","method","headers","body","JSON","stringify","title","editPostTitle","editPostText","then","editPost","makeNewComment","preventDefault","commentText","postId","commentsList","this","comments","map","element","index","key","postIsEdited","className","onClick","backToList","onChange","deletePost","onSubmit","Component","connect","state","CreateNewPost","showCreateForm","createPost","createPostTitle","length","createPostText","event","showForm","App","displayFullPost","num","response","json","setState","showAllPosts","allPosts","AllPosts","blogsList","list","Boolean","window","location","hostname","match","initialState","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d20ebd9a.chunk.js","sourcesContent":["\r\nexport function setFullPost(data){\r\n\treturn {\r\n\t\ttype: \"SETFULLPOST\",\r\n\t\tfullPost: data\r\n\t}\r\n}\r\n\r\nexport function makeComment(){\r\n\treturn function(dispatch, getState){\r\n\t\tif(getState().commentText!==\"\"){\r\n\t\t\t\tfetch(\"https://bloggy-api.herokuapp.com/comments\", {\r\n                    method: \"POST\",\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({\r\n                        postId: getState().fullPost.id,\r\n                        body: getState().commentText\r\n                    })\r\n                })\r\n                .then(\r\n                    dispatch(handleChange(\"commentText\", \"\"))\r\n                )\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function setPostVisibility(bool){\r\n\treturn{\r\n\t\ttype: \"TOGGLEPOST\",\r\n\t\tshowFullPost: bool\r\n\t}\r\n}\r\n\r\nexport const setEditTitle = {\r\n\ttype: \"SETEDITTITLE\"\r\n}\r\n\r\nexport function handleChange(name, text){\r\n\treturn {\r\n\t\ttype: \"HANDLECHANGE\",\r\n\t\ttext:text,\r\n\t\tname:name\r\n\t}\r\n}\r\n\r\nexport const TOGGLEFORM = {\r\n\ttype: \"TOGGLEFORM\"\r\n}\r\n\r\nexport function createPost(){\r\n\treturn function(dispatch, getState){\r\n\t\tif(getState().createPostTitle.length===0||getState().createPostText.length===0){return}else{\r\n\t\tfetch(\"https://bloggy-api.herokuapp.com/posts\", {\r\n\t\tmethod: \"POST\",\r\n\t\theaders: {\r\n\t\t'Content-Type': 'application/json'\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\ttitle: getState().createPostTitle,\r\n\t\tbody: getState().createPostText\r\n\t\t})\r\n\t\t})\r\n\t\t.then(dispatch(TOGGLEFORM))\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function setPostChanges(){\r\n\treturn function(dispatch, getState){\r\n\t\t\t\tfetch(\"https://bloggy-api.herokuapp.com/posts/\" + getState().fullPost.id ,{\r\n                method: \"PUT\",\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\r\n                    title: getState().editPostTitle,\r\n                    body: getState().editPostText\r\n                })\r\n            })\r\n\t\t\t.then(dispatch(toggleEditPost()))\r\n            \r\n\t}\r\n}\r\n\r\nexport function toggleEditPost(){\r\n\treturn {\r\n\t\ttype: \"TOGGLEEDITPOST\"\r\n\t}\r\n}","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from 'prop-types';\r\nimport {handleChange, setPostChanges, toggleEditPost, setEditTitle, makeComment} from './actions';\r\n\r\nclass FullPost extends Component{\r\n    handleChange = (e)=>{\r\n        let name = e.target.name;\r\n        let inpVal = e.target.value;\r\n        this.props.dispatch(handleChange(name, inpVal));\r\n    }\r\n    saveChanges = () => {\r\n        this.props.dispatch(setPostChanges());\r\n    }\r\n    editPost = () => {\r\n        this.props.dispatch(toggleEditPost());\r\n        this.props.dispatch(setEditTitle);\r\n    }\r\n    makeNewComment=(e)=>{\r\n        e.preventDefault();\r\n            this.props.dispatch(makeComment());\r\n        }\r\n\r\n  render(){\r\n    var commentsList;\r\n    if (this.props.showFullPost === true) {\r\n       commentsList = this.props.fullPost.comments.map((element, index) => {\r\n                return <li key={index}>{element.body}</li>\r\n            })\r\n\r\n        if (this.props.postIsEdited === true) { \r\n            return (\r\n                <div className=\"blog-page\">\r\n        <button onClick={this.props.backToList} className=\"back-button\">Go back</button>\r\n\r\n          <input type=\"text\" value={this.props.editPostTitle} className=\"edit-input\" name=\"editPostTitle\" onChange={this.handleChange} />\r\n        <input type=\"text\" value={this.props.editPostText} className=\"edit-input\" name=\"editPostText\" onChange={this.handleChange} />\r\n\r\n\r\n        <button onClick={this.saveChanges} className=\"button-margin-r\" >Save changes</button>\r\n        <button onClick={()=>{this.props.deletePost(this.props.fullPost.id)}} >Delete Post</button>\r\n\r\n        <p className=\"comments-title\">Comments</p>\r\n        <ul className=\"comments\">\r\n          {commentsList}\r\n        </ul>\r\n        <form onSubmit={this.makeNewComment} className=\"new-comment-form\">\r\n          \r\n          <textarea onChange={this.handleChange} name=\"commentText\" value={this.props.commentText} className=\"comment-textarea\"/>\r\n          <button >Add comment</button>\r\n        </form>\r\n      </div>\r\n            )\r\n        } else { \r\n            return (\r\n                <div className=\"blog-page\">\r\n        <button onClick={this.props.backToList} className=\"back-button\">Go back</button>\r\n        <h2 className=\"title\">{this.props.fullPost.title} </h2>\r\n        <p>{this.props.fullPost.body} </p>\r\n        <button onClick={this.editPost} className=\"button-margin-r\">Edit post</button>\r\n        <button onClick={()=>{this.props.deletePost(this.props.fullPost.id)}} >Delete Post</button>\r\n\r\n        <p className=\"comments-title\">Comments</p>\r\n        <ul className=\"comments\">\r\n          {commentsList}\r\n        </ul>\r\n        <form onSubmit={this.makeNewComment} className=\"new-comment-form\">\r\n          <textarea onChange={this.handleChange} name=\"commentText\" value={this.props.commentText} className=\"comment-textarea\"/>\r\n          <button >Add comment</button>\r\n        </form>\r\n      </div>\r\n            )\r\n        }\r\n\r\n    } else {\r\n        return null;\r\n    }    \r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state)=>({\r\n    fullPost: state.fullPost,\r\n    showFullPost: state.showFullPost,\r\n    editPostTitle: state.editPostTitle,\r\n    editPostText: state.editPostText,\r\n    postIsEdited: state.postIsEdited,\r\n    commentText: state.commentText\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps)(FullPost);","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport {handleChange, TOGGLEFORM, createPost} from './actions';\r\n\r\nclass CreateNewPost extends Component {\r\n    showCreateForm = () => {\r\n        this.props.dispatch(TOGGLEFORM);\r\n    }\r\n\r\n    createPost = (e) => {\r\n        e.preventDefault();\r\n        this.props.dispatch(createPost()); \r\n    }\r\n\r\n    handleChange = (event) => {\r\n        var name = event.target.name;\r\n        var inpVal = event.target.value;\r\n        this.props.dispatch(handleChange(name,inpVal));\r\n    }\r\n\r\n    render(){\r\n        if (this.props.showForm) {\r\n        return (\r\n            <div>\r\n            <button onClick={this.showCreateForm} className=\"create-post-btn\">Hide form</button>\r\n          <form onSubmit={this.createPost} className=\"new-post-form\" >\r\n            <label>Title <input type=\"text\" name=\"createPostTitle\" onChange={this.handleChange} value={this.props.createPostTitle} /></label>\r\n            <label>Text <input type=\"text\" name=\"createPostText\" onChange={this.handleChange} value={this.props.createPostText} /></label>\r\n            <button>Submit</button>\r\n          </form>\r\n          </div>\r\n        )\r\n        } else {\r\n            return <button onClick={this.showCreateForm} className=\"create-post-btn\" >Create a new post</button>\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state)=>({\r\n    createPostText: state.createPostText,\r\n    createPostTitle: state.createPostTitle,\r\n    showForm: state.showForm\r\n})\r\n\r\nexport default connect(mapStateToProps)(CreateNewPost);","import React, { Component } from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport {setFullPost, setPostVisibility} from './actions';\nimport FullPost from './FullPost';\nimport CreateNewPost from './CreateNewPost';\n\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            allPosts: [],\n            showAllPosts: true\n        }\n    }\n\n    componentDidMount() {\n        fetch(\"https://bloggy-api.herokuapp.com/posts\")\n            .then(response => response.json())\n            .then(response => {\n                this.setState({ allPosts: response })\n            })\n    }\n\n    displayFullPost = (num) => {\n        fetch(\"https://bloggy-api.herokuapp.com/posts/\" + num + \"?_embed=comments\")\n            .then(response => response.json())\n            .then(response => {\n                this.setState({showAllPosts: false });\n                this.props.dispatch(setFullPost(response));\n                this.props.dispatch(setPostVisibility(true));\n            })\n    }\n\n    backToList = () => {\n        this.setState({ showAllPosts: true });\n        this.props.dispatch(setPostVisibility(false));\n    }\n\n    deletePost = (num) => {\n        fetch(\"https://bloggy-api.herokuapp.com/posts/\" + num, {\n                method: \"DELETE\"\n            })\n            .then(\n                fetch(\"https://bloggy-api.herokuapp.com/posts\")\n                .then(response => response.json())\n                .then(response => {\n                    this.setState({ allPosts: response, showAllPosts: true });\n                    this.props.dispatch(setPostVisibility(false));\n                })\n            )\n    }\n\n    handleChange = (event) => {\n        var name = event.target.name;\n        var inpVal = event.target.value;\n        this.setState({\n            [name]: inpVal\n        })\n    }\n\n    render() {\n        return (\n        <div className=\"App\">\n            <AllPosts blogsList = {this.state.allPosts} displayFullPost={this.displayFullPost} showAllPosts={this.state.showAllPosts}\n            handleChange={this.handleChange} />\n          \n            <FullPost backToList={this.backToList} deletePost={this.deletePost}/>\n        </div>\n        );\n    }\n}\n\nfunction AllPosts(props) {\n    if (props.showAllPosts === true) {\n        var list = props.blogsList.map((element, index) => {\n            return <div key={index} className=\"post\" onClick={()=>{props.displayFullPost(element.id)}} >\n      <h2 className=\"title\" >{element.title} </h2>\n      <p>{element.body} </p>\n    </div>\n        })\n\n        return (\n            <div>\n      <CreateNewPost/>\n      <div className=\"all-posts\">\n        {list}\n      </div>\n      </div>\n        )\n    } else { return null; }\n}\n\nconst mapStateToProps = (state)=>({\n    fullPost: state.fullPost\n})\nexport default connect(mapStateToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware  } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from 'redux-thunk';\n\nconst initialState = {\n\tcommentText: \"\",\n\tfullPost: {\n\t\tcomments: []\n\t},\n\tshowFullPost:false,\n\teditPostTitle: \"\",\n\teditPostText: \"\",\n\tcreatePostText: \"\",\n    createPostTitle: \"\",\n    showForm: false,\n    postIsEdited:false\n}\nfunction reducer(state=initialState,action){\n\tswitch(action.type){\n\t\tcase \"SETFULLPOST\":\n\t\treturn {\n\t\t\t...state,\n\t\t\tfullPost: action.fullPost\n\t\t};\n\n\t\tcase \"TOGGLEPOST\":\n\t\treturn{\n\t\t\t...state,\n\t\t\tshowFullPost: action.showFullPost\n\t\t};\n\n\t\tcase \"SETEDITTITLE\":\n\t\treturn{\n\t\t\t...state,\n\t\t\teditPostTitle: state.fullPost.title, //questionable\n\t\t\teditPostText: state.fullPost.body\n\t\t};\n\n\t\tcase \"HANDLECHANGE\":\n\t\treturn{\n\t\t\t...state,\n\t\t\t[action.name]: action.text\n\t\t};\n\n\t\tcase \"TOGGLEFORM\":\n\t\treturn{\n\t\t\t...state,\n\t\t\tshowForm: !state.showForm\n\t\t};\n\n\t\tcase \"SHOWEDITPOST\":\n\t\treturn{\n\t\t\t...state,\n\t\t\tpostIsEdited:true\n\t\t};\n\n\t\tcase \"TOGGLEEDITPOST\":\n\t\treturn{\n\t\t\t...state,\n\t\t\tpostIsEdited: !state.postIsEdited\n\t\t}\n\t\tdefault: \n\t\t\treturn state;\n\t}\n}\nconst store = createStore(\n  reducer,\n  applyMiddleware(thunk)\n);\n\nconst Main = ()=>(\n<Provider store={store}><App/></Provider>\n)\n\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}